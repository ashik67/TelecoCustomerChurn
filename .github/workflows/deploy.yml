name: Build and Deploy Telco Churn MLOps Pipeline to AWS EC2

on:
  push:
    branches: [main]
    paths-ignore:
      - '**/*.md'
      - '**/.env'
      - '**/.gitignore'
      - '**/README.md'
      - '**/LICENSE'
      - '**/docs/**'
      - '**/sample_batch_input.csv'
      - '**/data_schema/**'
      - '**/EDA.ipynb'

env:
  AWS_REGION: ${{ vars.AWS_REGION }}
  IMAGE_TAG: ${{ vars.IMAGE_TAG }}
  EC2_USER: ${{ vars.EC2_USER }}
  CONTAINER_NAME: ${{ vars.CONTAINER_NAME }}
  MONGO_URI: ${{ secrets.MONGO_URI }}
  CLOUDWATCH_LOG_STREAM: ${{ vars.CLOUDWATCH_LOG_STREAM }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Create S3 bucket for Terraform state (ignore error if exists)
        run: |
          aws s3api create-bucket --bucket teleco-churn-tfstate-bucket --region us-east-1 --create-bucket-configuration LocationConstraint=us-east-1 || true

      - name: Create DynamoDB table for Terraform lock (ignore error if exists)
        run: |
          aws dynamodb create-table \
            --table-name teleco-churn-tfstate-lock \
            --attribute-definitions AttributeName=LockID,AttributeType=S \
            --key-schema AttributeName=LockID,KeyType=HASH \
            --provisioned-throughput ReadCapacityUnits=1,WriteCapacityUnits=1 \
            --region us-east-1 || true

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.7.5

      - name: Terraform Init
        run: terraform init
        working-directory: infra

      - name: Terraform Validate
        run: terraform validate
        working-directory: infra

      - name: Import existing AWS resources into Terraform state
        run: |
          set -x
          terraform import aws_s3_bucket.artifacts teleco-churn-artifacts || true
          terraform import aws_ecr_repository.app_repo teleco-churn-fastapi || true
          terraform import aws_cloudwatch_log_group.app_logs /teleco-churn/logs || true
          terraform import aws_iam_role.ec2_role teleco-churn-ec2-role || true
          terraform import aws_iam_instance_profile.ec2_profile teleco-churn-ec2-profile || true
          # NOTE: Set EC2_SG_ID as a GitHub Actions variable for the security group import below
          terraform import aws_security_group.ec2_sg ${{ vars.EC2_SG_ID }} || true
        working-directory: infra

      - name: Terraform Plan
        run: terraform plan
        working-directory: infra

      - name: Terraform Apply
        run: terraform apply -auto-approve
        working-directory: infra

      - name: Get Terraform Outputs
        id: tf-outputs
        run: |
          echo "S3_BUCKET=$(terraform -chdir=infra output -raw s3_bucket_name)" >> $GITHUB_ENV
          echo "ECR_REPOSITORY=$(terraform -chdir=infra output -raw ecr_repo_name)" >> $GITHUB_ENV
          echo "ECR_REPOSITORY_URL=$(terraform -chdir=infra output -raw ecr_repo_url)" >> $GITHUB_ENV
          echo "CLOUDWATCH_LOG_GROUP=$(terraform -chdir=infra output -raw cloudwatch_log_group_name)" >> $GITHUB_ENV
          echo "EC2_HOST=$(terraform -chdir=infra output -raw ec2_public_dns)" >> $GITHUB_ENV

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to ECR
        run: |
          docker build -t $ECR_REPOSITORY:$IMAGE_TAG .
          docker tag $ECR_REPOSITORY:$IMAGE_TAG $ECR_REPOSITORY_URL:$IMAGE_TAG
          docker push $ECR_REPOSITORY_URL:$IMAGE_TAG

      - name: Prepare EC2 (upgrade & install Docker)
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ env.EC2_HOST }}
          username: ${{ env.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            sudo yum update -y
            sudo amazon-linux-extras install docker -y || sudo yum install docker -y
            sudo service docker start
            sudo usermod -a -G docker $USER || sudo usermod -a -G docker ec2-user
            sudo systemctl enable docker
            docker --version

      - name: Deploy to EC2 via SSH
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ env.EC2_HOST }}
          username: ${{ env.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          envs: ECR_REPOSITORY,ECR_REPOSITORY_URL,IMAGE_TAG,CONTAINER_NAME,MONGO_URI,S3_BUCKET,CLOUDWATCH_LOG_GROUP,CLOUDWATCH_LOG_STREAM,AWS_REGION
          script: |
            echo "CONTAINER_NAME=$CONTAINER_NAME"
            echo "IMAGE=$ECR_REPOSITORY_URL:$IMAGE_TAG"
            echo "MONGO_URI=$MONGO_URI"
            echo "S3_BUCKET=$S3_BUCKET"
            echo "CLOUDWATCH_LOG_GROUP=$CLOUDWATCH_LOG_GROUP"
            echo "CLOUDWATCH_LOG_STREAM=$CLOUDWATCH_LOG_STREAM"
            echo "AWS_REGION=$AWS_REGION"
            aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin $ECR_REPOSITORY_URL | true
            docker pull $ECR_REPOSITORY_URL:$IMAGE_TAG
            docker stop $CONTAINER_NAME || true
            docker rm $CONTAINER_NAME || true
            docker run -d --name $CONTAINER_NAME \
              -e MONGO_URI="$MONGO_URI" \
              -e S3_BUCKET="$S3_BUCKET" \
              -e CLOUDWATCH_LOG_GROUP="$CLOUDWATCH_LOG_GROUP" \
              -e CLOUDWATCH_LOG_STREAM="$CLOUDWATCH_LOG_STREAM" \
              -e AWS_REGION="$AWS_REGION" \
              -p 80:8000 $ECR_REPOSITORY_URL:$IMAGE_TAG
